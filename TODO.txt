Client.pm
replace getClient with
# If the ID is undef, that means we have a new client.
sub getClient {
	my $id  = shift || return undef;
	my $ret = $clientHash{$id};

	# Try a brute for match for the client.
	if (!defined($ret)) {
   		 for my $value ( values %clientHash ) {
			return $value if ($value->ipport) eq $id);
			return $value if ($value->ip) eq $id);
			return $value if ($value->name) eq $id);
			return $value if ($value->id) eq $id);
		}
		# none of these matched, so return undef
		return undef;
	}

	return($ret);
}

add $client in stop

When a virtual starts, all members are assembled. If empty, previoussyncgroup is set to current syncgroup if any, otherwise it is set to -1. This is to ensure that when a player is member of more than one virtual groups and they play each after one, only the initial true static group is saved. We don’t want a player to rejoin on its own the 1st virtual when the 2nd stops and if previoussyncgroup is not always set, the second virtual would erroneously save the first syncgroup as a static group when assembled and that would create a fake static group when the 2nd virtual stops. To have such player re-join the 1st virtual, then play something on it!

When a virtual stops, all members are disassembled and they re-join their saved syncgroup (in no restart mode) unless it’s -1 or they are already playing, which means that group structure as changed, so better leave them where they are now. The previoussyncgroup is deleted. Again, a player member of more than one virtual will not rejoin the previous one when the current one disassembles  

When a virtual pauses, the process is the same. Note that a player member of a static group will restart to play whatever that group is playing when it moves to the next track. The only way to avoid that is to disable static group restoration. I can’t see any better logic now - rejoining static group if it does not play sounds a bit funny, but I can think about it

When a member stops (happens on playlist replacement or deletion - need to confirm that last one), it leaves the virtual but does not stop it. Its savedsyncgroup is not deleted so that he can re-join it when the virtual stops. Use case is when power off a player to have peace in one room, one still want that player to rejoin static group when virtual stops, but when the individual player is power-on again, one want it to re-join the virtual if it still exists. Need to verify that power off does not mean stop or pause unless the user has configured it, in which case you got what you asked for...

When a member pauses, the virtual pauses with it as it is assumed that if the user just wanted to change something on this particular player, it would power it off or change its playlist (see above) - Now one can assume that user might want to press resume on a member and expects the virtual to resume. For this to ne achieved, the virtual is not disassembled, only in that particular case. I still have to think about side effects, but that sounds logical that, if a user pauses explicitly a member (a button on a physical player or on iPeng), he does expect the virtual to restart with it. If he later changes the playlist of that player, then a stop will occur that will remove it from the virtual. The virtual will stay assembled, though, which sounds logical as well, as long as the virtual does not become a fake static group

Need to memorize respective volume in plugin’s client properties and set it at group assembly 

Move all clients prefs to server prefs to limit plugins parameters to minimum. Means player default pref will now include syncPowerGroup and statiicgroupsyncid d and group.syncVolume as well as members 